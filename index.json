[{"content":" A little piece of insight into this mans brain, hopefully your IQ doesn\u0026rsquo;t drop too much after reading these. ","date":null,"permalink":"https://matthewrobinsondev.com/posts/","section":"Blog","summary":"","title":"Blog"},{"content":"The best developers I\u0026rsquo;ve worked with have always shared one trait, enthusiasm.\nThey were the ones who got genuinely excited about something. Whether it was a new framework, language, editor, or even just changing colourschemes \u0026amp; fonts - their enthusiasm was infectious.\nI first noticed this two years into my career. There was this senior developer who was recently hired who was absolutely obsessed with Emacs and Arch Linux. I was blown away as someone who had only used xfce, the default terminal and atom for 2 years, with 0 plugins etc. He also introduced me to TDD as a fun fact. But that\u0026rsquo;s where I caught the dotfiles bug, I remember going home and spending the weekend watching videos and reading articles on arch and emacs, I saw the potential on what I could create from what his setup was like but I didn\u0026rsquo;t want to copy that. I wanted to figure out how to get there. The enthusiasm was contagious though, from that first weekend until he left we would constantly discuss dotfiles, fun times. DistroTube the goat.\nEnthusiasm breeds exploration #I ended up discovering \u0026amp; settling with AwesomeWM, doom emacs and ubuntu for the most part. I enjoyed trying to get the most out of emacs. I had emails coming through and being sent from it at one point. The ripple effect was real. His enthusiasm didn\u0026rsquo;t just make me want to learn Emacs - it made me want to understand why he loved it so much. I quickly figured it out, you can turn your tools into anything, any keybind, any usecase. The possibilities were and still are endless.\nYou can just build whatever you want to solve whatever problem you have.\nI\u0026rsquo;ve since had the pleasure of meeting and working with developers, who are much smarter than myself, and they all have the same trait. They\u0026rsquo;re enthusiastic about what they do. Maybe not on each daily task, but overall you can get them into a conversation about something they enjoy in tech. It\u0026rsquo;s the best, I learn so many things from just random throwaway conversations. It\u0026rsquo;s not that you learn it there in that conversation, it\u0026rsquo;s that it stores in your mind somewhere and you come back to research/learn about it yourself properly at a different time after learning the top level information in a conversation.\nSomething I often try and do in life is look at other people\u0026rsquo;s perspectives, and when you try and understand someone\u0026rsquo;s enthusiasm it\u0026rsquo;s usually very easy to become enthused in it yourself. That\u0026rsquo;s why I follow so many sports, I usually can find the fun in them! Other than f1, still struggling, sorry dad.\nIron sharpens iron (or whatever the developer equivalent is) #There\u0026rsquo;s an old saying about iron sharpening iron, and I think it applies perfectly to development. When you\u0026rsquo;re surrounded by people who are genuinely excited about what they\u0026rsquo;re building, that energy is contagious.\nI\u0026rsquo;ve worked on teams where everyone seemed to be just going through the motions. Tickets got completed, code got merged, features got shipped. But there was no spark. No one was excited about trying new approaches or leveraging new tools, or to be honest even going looking past what had already been implemented. If it hadn\u0026rsquo;t been implemented before there was no innovation. It felt stale.\nThen I\u0026rsquo;ve worked on teams where people would share articles about interesting architectural patterns they\u0026rsquo;d read about, new languages they\u0026rsquo;ve tried, new frameworks or even just showing what side projects they\u0026rsquo;ve been working on.\nWhen I joined my current job I had the pleasure of working with a chap named Damian, every monday morning in the office we\u0026rsquo;d ask each other if we worked on any side projects over the weekend. If we did we\u0026rsquo;d chat and probably show the other. It was nothing special, probably not longer than 15 minutes most times but it was always an interesting way to start the week just speaking about something that gets the brain going.\nThe difference in output was night and day. When people are enthusiastic about their craft, they naturally write better code, ask better questions, and push each other to improve. How often do you ever get the correct implementation first time, before realising there\u0026rsquo;s a better way or scenario you\u0026rsquo;ve not thought of? Active teams catch these problems.\nNegativity is contagious too #The flip side of this is equally true, and much more draining. Teams that aren\u0026rsquo;t all on the same page, and there are internal issues etc are tiring. Not even to the people directly involved but all members. Getting things done moves from being a smooth sailing operation to constant issues, and worst of all if people are stubborn you can get decision fatigue.\nWhen you\u0026rsquo;re surrounded by that kind of energy, it becomes infectious in all the wrong ways. You start to see problems everywhere and solutions nowhere.\nI\u0026rsquo;m not saying you should be blindly optimistic about everything - healthy scepticism is important. But there\u0026rsquo;s a difference between thoughtful criticism and demoralising negativity.\nFind your thing and share it! #So what\u0026rsquo;s the takeaway here? I think it\u0026rsquo;s twofold:\nFirst, find something about tech that genuinely excites you. Maybe it\u0026rsquo;s functional programming, maybe it\u0026rsquo;s DevOps tooling, maybe it\u0026rsquo;s AI this day and age, or maybe it\u0026rsquo;s something left field like home automation. It doesn\u0026rsquo;t matter what it is, but having something you\u0026rsquo;re passionate about will make you a better developer, it pushes you to keep going.\nSecond, don\u0026rsquo;t be afraid to share that enthusiasm. You don\u0026rsquo;t have to evangelise or force your preferences on others, but talking about what excites you gives others permission to get excited too. I like using terminals, I like building dev tooling, I enjoy football, basketball \u0026amp; american football currently. Feel free to reach out to me about any of them :) Though I\u0026rsquo;ve had it rough in sports with United, New Orleans Pelicans and New Orleans Saints in the last 12 months though so that\u0026rsquo;s a touchy subject.\nHope you enjoyed \u0026amp; go do something you enjoy with the rest of your day.\n","date":"4 August 2025","permalink":"https://matthewrobinsondev.com/posts/enthusiasm-is-contagious/","section":"Blog","summary":"","title":"Enthusiasm is contagious"},{"content":"","date":null,"permalink":"https://matthewrobinsondev.com/","section":"Home","summary":"","title":"Home"},{"content":"","date":null,"permalink":"https://matthewrobinsondev.com/tags/how-to/","section":"Tags","summary":"","title":"How-To"},{"content":"","date":null,"permalink":"https://matthewrobinsondev.com/tags/just-build-it/","section":"Tags","summary":"","title":"Just-Build-It"},{"content":" Is this complex? No. Did I learn something from this? Yes!\nAwesome is a window manager wrote in lua. For some context, the base installation of awesome doesn\u0026rsquo;t come with bells \u0026amp; whistles. I was using this on my laptop \u0026amp; realised I had no way to see what battery percentage I was at, so why not see if I can implement it myself?\nI\u0026rsquo;ve never really messed around with the wiibar before in AwesomeWM so I\u0026rsquo;m creating a really basic one which just outputs the percentage, a UTF8 charcter and changes the colour of the text.\nThis guide explains how to create custom widgets in AwesomeWM, using the battery widget mentioned as the practical example:\nBasic Widget Structure #1. Required Libraries #Every widget typically starts with importing necessary libraries:\nlocal awful = require(\u0026#34;awful\u0026#34;) local wibox = require(\u0026#34;wibox\u0026#34;) -- Widget framework local naughty = require(\u0026#34;naughty\u0026#34;) -- Notifications -- For the sake of our widget we need the UTF8 library local utf8 = require(\u0026#34;utf8\u0026#34;) 2. Widget Creation #Widgets are created using wibox.widget. The basic structure involves:\nCreating a container widget Defining widget components Specifying the layout local my_widget = wibox.widget({ { id = \u0026#34;icon\u0026#34;, widget = wibox.widget.textbox, }, { id = \u0026#34;text\u0026#34;, widget = wibox.widget.textbox, }, layout = wibox.layout.fixed.horizontal, -- Since we want them side by side }) 3. Data Storage #Store static data (like icons, colors) in tables for easy access and modification:\nlocal battery_icons = { [100] = utf8.char(0xf240), -- Full battery [75] = utf8.char(0xf241), -- Three quarters [50] = utf8.char(0xf242), -- Half [25] = utf8.char(0xf243), -- Quarter [0] = utf8.char(0xf244), -- Empty charging = utf8.char(0xf0e7), -- Lightning bolt unknown = utf8.char(0xf128), -- Question mark } local colors = { charging = \u0026#34;#ffffff\u0026#34;, good = \u0026#34;#00ff00\u0026#34;, medium = \u0026#34;#ffff00\u0026#34;, low = \u0026#34;#ff0000\u0026#34;, unknown = \u0026#34;#ffffff\u0026#34;, } Widget Logic #2. Update Function #Create a main update function that refreshes the widget\u0026rsquo;s display:\nlocal function update_widget(widget) -- Get data (e.g., from system command) awful.spawn.easy_async([[command]], function(stdout) -- Parse data local value = parse_data(stdout) -- Update components widget:get_children_by_id(\u0026#34;first_component\u0026#34;)[1]:set_markup( format_data(value) ) end) end How this looks for our battery:\nlocal function update_battery(widget) awful.spawn.easy_async([[bash -c \u0026#34;acpi\u0026#34;]], function(stdout) local first_line = stdout:match(\u0026#34;^[^\\n]+\u0026#34;) -- Only need first battery, for some reason external monitor shows up local status, percentage = first_line:match(\u0026#34;Battery 0: ([%w%s]+), (%d+)%%\u0026#34;) percentage = tonumber(percentage) or 0 local is_charging = status == \u0026#34;Charging\u0026#34; local icon = get_battery_icon(percentage, is_charging) local color = get_battery_color(percentage, is_charging) local charging_indicator = is_charging and \u0026#34; ⚡\u0026#34; or \u0026#34;\u0026#34; widget:get_children_by_id(\u0026#34;icon\u0026#34;)[1]:set_markup(string.format(\u0026#39;\u0026lt;span color=\u0026#34;%s\u0026#34;\u0026gt;%s\u0026lt;/span\u0026gt;\u0026#39;, color, icon)) widget :get_children_by_id(\u0026#34;text\u0026#34;)[1] :set_markup(string.format(\u0026#39;\u0026lt;span color=\u0026#34;%s\u0026#34;\u0026gt; %d%%%s\u0026lt;/span\u0026gt;\u0026#39;, color, percentage, charging_indicator)) end) end 3. Timer/Watch Setup #Set up automatic updates using awful.widget.watch:\nawful.widget.watch(\u0026#34;acpi\u0026#34;, 30, function(widget) update_battery(widget) end, battery_widget) update_battery(battery_widget) Interactivity #1. Click Handlers #Add mouse click interactions, this lets us see the full information in our example:\nlocal function show_battery_details() awful.spawn.easy_async([[bash -c \u0026#34;acpi -i\u0026#34;]], function(stdout) naughty.notify({ title = \u0026#34;Battery Status\u0026#34;, text = stdout, timeout = 5, position = \u0026#34;top_right\u0026#34;, width = 300, }) end) end battery_widget:connect_signal(\u0026#34;button::press\u0026#34;, function(_, _, _, button) if button == 1 then show_battery_details() end end) 2. Hover Effects #Add hover effects, this lets us change the mouse cursor for our example:\nbattery_widget:connect_signal(\u0026#34;mouse::enter\u0026#34;, function() local wb = mouse.current_wibox if wb then wb.cursor = \u0026#34;hand1\u0026#34; end end) battery_widget:connect_signal(\u0026#34;mouse::leave\u0026#34;, function() local wb = mouse.current_wibox if wb then wb.cursor = \u0026#34;left_ptr\u0026#34; end end) 3. Notifications #Add notifications for important events:\nif percentage \u0026lt; 15 and not is_charging then naughty.notify({ title = \u0026#34;Battery Low!\u0026#34;, text = \u0026#34;Battery level is \u0026#34; .. percentage .. \u0026#34;%\\nPlease connect charger\u0026#34;, timeout = 10, position = \u0026#34;top_right\u0026#34;, bg = \u0026#34;#ff0000\u0026#34;, fg = \u0026#34;#ffffff\u0026#34;, width = 300, }) end Integration #Add the widget to your wibar in rc.lua:\ns.mywibox:setup { { layout = wibox.layout.fixed.horizontal, my_widget, -- other widgets... }, -- ... } This structure can be adapted for creating various types of widgets like CPU monitors, network status, volume controls, etc.\nThe world is your limit, just build stuff \u0026amp; have fun!\nThe source code for this basic widget can be found here.\n","date":"19 January 2025","permalink":"https://matthewrobinsondev.com/posts/how-to-make-an-awesomewm-widget/","section":"Blog","summary":"","title":"Making an AwesomeWM Widget"},{"content":"","date":null,"permalink":"https://matthewrobinsondev.com/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"I recently finished reading Tracers in the Dark, and I found it an engaging exploration of the darknet and the underground marketplaces that have transitioned into the digital age. The book covers major stories from 2011 to the present day, weaving these narratives into a thriller-esque style that’s reminiscent of Andy Greenberg’s previous hit in Sandworm, another excellent book.\nSide note: I\u0026rsquo;ve also recently been enjoying these animated summarized documentaries on similar cases to the ones wrote about in the book Fern\nUnlike dry, purely factual accounts, the Greenberg successfully crafts a compelling, novel-like experience that keeps the reader hooked.\nOne standout aspect of the book was its thought-provoking conclusion. Greenberg delves into how tools like Chainalysis were pivotal in cracking some of the largest darknet cases. A striking example is the takedown of AlphaBay, where information was allegedly gathered by deploying Bitcoin nodes to track IP addresses linked to payments. Interestingly, this insight came from a former AlphaBay lieutenant, who discovered leaked data from an Italian law enforcement agency suggesting such techniques were used.\nI appreciated how the book debunked the myth of anonymous payments often associated with cryptocurrencies. Illustrating how even supposedly untraceable systems can be unraveled with the right tools and determination.\nWhile I enjoyed the book, I wouldn’t describe it as an edge-of-your-seat thriller. It didn’t feel like a read I couldn’t put down, but at the same time, I never struggled to pick it up again. This balance might be due to the overarching negative tone of the book, which is understandable given the topic. There were moments, particularly in the beginning, that felt slower, but such pacing issues are common in many books. Maybe I\u0026rsquo;m the problem.\nThis book’s style makes it highly approachable for non-technical readers. It navigates the nuances of technical concepts effectively, often framing them within first-hand accounts of law enforcement agents interacting with digital technology for the first time. However, if you’re looking for deep technical insights, this might not be the book for you. As someone with a technical background, I didn’t learn much in that regard, but I still found the stories compelling and thoroughly enjoyable.\nOverall, I would recommend Tracers in the Dark to anyone interested in the intersection of technology and crime. Its engaging storytelling and accessible explanations make it a great choice for both casual readers and those with a more technical bent who are curious about the darknet’s history. While it might not leave you breathless, it will certainly leave you informed and intrigued.\n","date":"7 January 2025","permalink":"https://matthewrobinsondev.com/posts/tracers-in-the-dark-review/","section":"Blog","summary":"","title":"Tracers in the dark review"},{"content":"If you’re not familiar with imposter syndrome, here’s how the British Medical Association defines it:\nImposter syndrome is described as a feeling of inadequacy that persists despite evidence of success.\nWhen I sat down to write this, my goal was to get across that you don’t need to know everything.\nAnd more than that, I wanted to flip that pressure into something positive, something that pushes us toward learning instead of weighing us down. The biggest breakthrough I’ve had in battling imposter syndrome came from reversing the mindset of “I should have known that; why don’t I already know that?” to “I don’t know that—what is it?”\nLet’s be honest, though. Imposter syndrome doesn’t care about logic. Even though we know nobody knows everything, the pressure still creeps in. Maybe it’s job demands, or maybe it’s just the sheer speed of tech. The trick is letting learning be part of the process, not some requirement we missed along the way.\nWhen we talk to other developers, we’re not expecting them to know everything. Usually, we’re just tapping into what they know best and genuinely want to learn from them. We forget they gained that knowledge the same way we are—through trying, failing, and figuring things out.\nImposter syndrome doesn’t have to be all bad. In fact, recognizing gaps in our knowledge is an incredible place to start. It means we’re self-aware and can work on these areas. We just need to turn that acknowledgment into action. Everyone learns in different ways and at different paces, and what’s important is taking steps forward with this energy—without letting guilt freeze us in place. Change the mentality from fear of the unknown into excitement to understand \u0026amp; you\u0026rsquo;ll be flying.\nIt\u0026rsquo;s worth remembering that worrying about how much you don\u0026rsquo;t know, is a much better position than thinking you know it all.\nI\u0026rsquo;ve used this quote in another post but it\u0026rsquo;s great, sue me.\n“The more I learn, the more I realize how much I don\u0026rsquo;t know.” - Albert Einstein\nThese things aren\u0026rsquo;t easy, I wanted to share my experience \u0026amp; hopefully this can help ease someone elses :)\n","date":"11 November 2024","permalink":"https://matthewrobinsondev.com/posts/its-okay-not-to-know-everything/","section":"Blog","summary":"","title":"Turning the tide in the battle against imposter syndrome"},{"content":"As I\u0026rsquo;ve mentioned in previous posts, I like to mess around with my dotfiles and consistently change what tools \u0026amp; software I use. However, alacritty has been the one constant for me for many years, it was fast, lightweight, easily configurable \u0026amp; I just had no reason to change.\nI started going down the rabit hole of increasing my terminal speed \u0026amp; overall experience by moving from Oh My Zsh to using zinit for plugin management \u0026amp; starship as a prompt.\nThis reduced my terminal load speed by around ~22%. when I reduce startup time by 100ms During this escapade I found out about Wezterm. The more I read, the more I liked, so I gave it a go.\nWhat is Wezterm #Wezterm is also a GPU-accelerated cross-platform terminal which written in rust. It comes with pretty much every modern terminal feature you can hope for; here\u0026rsquo;s full list here. The gamechanger for me \u0026amp; what made me seriously start looking into it was the built-in multiplexing, so long tmux \u0026amp; zellij. I could now have one terminal which handled all of my multiplexing needs.\nMultiplexing #Windows #In tmux,for example, windows let you create multiple screens within a session and easily tab between them. In Wezterm, they are simply just tabs at the top. In all honesty I changed my keybindings for creating \u0026amp; switching windows in Wezterm and they work perfectly.\nI will say though, I\u0026rsquo;ve not looked at any configuration for the UI of the tabs yet, or if its possible. They are very out of the way in Wezterm which I don\u0026rsquo;t personally mind as I never named my windows in tmux anyway.\nSessions #One thing I use every day now in my workflow is sessions in tmux. I switch between codebases creating a session for each one, which I can just attach \u0026amp; detach from as needed throughout my day. Also, I like having stuff like notes in a session \u0026amp; monitoring tools.\nWezterm allows me to do that with workspaces.\nThis can be created by adding this to your configuration.\n{ key = \u0026#34;w\u0026#34;, mods = \u0026#34;LEADER\u0026#34;, action = act.PromptInputLine({ description = Wezterm.format({ { Attribute = { Intensity = \u0026#34;Bold\u0026#34; } }, { Foreground = { AnsiColor = \u0026#34;Fuchsia\u0026#34; } }, { Text = \u0026#34;Enter name for new workspace\u0026#34; }, }), action = wezterm.action_callback(function(window, pane, line) -- line will be `nil` if they hit escape without entering anything -- An empty string if they just hit enter -- Or the actual line of text they wrote if line then window:perform_action( act.SwitchToWorkspace({ name = line, }), pane ) end end), }), }, I remapped all of the main keys I use with the mod of leader \u0026amp; \u0026lsquo;w\u0026rsquo; for workspaces, but feel free to swap them with what feels comfortable.\nI\u0026rsquo;m currently adding a local function where if I create a workspace witch matches a name set in the function, you can explicilty load programs \u0026amp; templates like in tmux!\nThere are examples in the documentation here.\nConfiguration #Over the last 6 months I\u0026rsquo;ve switched to neovim (btw) \u0026amp; previously used Awesome Window Manager which both have configuration files written in lua. I\u0026rsquo;m no expert by any means but know enough to get by.\nSo the config being written in lua for it was rather nice, it\u0026rsquo;s an easy language but extensible enough to let me to tweak to my hearts content.\nI won\u0026rsquo;t go over every config but here is a segment of my personal config, which in full can be found here.\n-- Pull in the Wezterm API local Wezterm = require(\u0026#34;Wezterm\u0026#34;) -- This will hold the configuration. local config = Wezterm.config_builder() -- font config.font = Wezterm.font(\u0026#34;Fira Code\u0026#34;) -- Change leader key config.leader = { key = \u0026#34;Space\u0026#34;, mods = \u0026#34;CTRL\u0026#34;, timeout_milliseconds = 1000 } -- This is where you actually apply your config choices -- For example, changing the color scheme: config.color_scheme = \u0026#34;Catppuccin Mocha\u0026#34; config.hide_tab_bar_if_only_one_tab = true config.font_size = 14.0 config.window_background_opacity = 0.8 config.window_padding = { left = \u0026#34;3cell\u0026#34;, right = \u0026#34;3cell\u0026#34;, top = \u0026#34;1cell\u0026#34;, bottom = \u0026#34;1cell\u0026#34;, } It\u0026rsquo;s very cookie-cutter currently but I don\u0026rsquo;t hate that. The full documentatio and walkthrough can be found in their docs.\nError handling #As it\u0026rsquo;s written in Rust, it has a very verbose error handling system which will inform you on any errors to your configuration when hot reloaded with a nice popup.\nIn this example, you can\u0026rsquo;t put a pipe between to keys when setting a keybind. Conclusion #In short, I\u0026rsquo;ve been very impressed in my short usage of Wezterm \u0026amp; fully plan on using this going forward. Who knows, maybe I\u0026rsquo;ll run into some things I don\u0026rsquo;t like, but so far it\u0026rsquo;s ticked every box.\nThe main selling points for me:\nI don\u0026rsquo;t need seperate configurations for terminal \u0026amp; multiplexer. The configuration is written in lua, which allows much more flexibility and customization. The configuration is also very straight forward. As it\u0026rsquo;s written in rust, you get very verbose errors. Configuration is hot loaded. Great documentation \u0026amp; examples, for example using ssh in multiplexing. ","date":"9 June 2024","permalink":"https://matthewrobinsondev.com/posts/wezterm-is-incredible/","section":"Blog","summary":"","title":"Wezterm is my new favourite terminal AND multiplexer"},{"content":"Go seems like the perfect language for Lambdas; simple, concise, and compiled. In this we will:\nCreate our go lambda function. Use terraform to spin up our resources. Use the event bridge to create a cron of our lambda being called every minute. Be able to view our lambda being triggered in cloudwatch. I don’t offer money-back guarantees around here, but getting this up and running is as quick as removing the open-source license from software that people have built companies on.\nNot aimed at anyone in particular, especially someone who\u0026rsquo;s just sold to IBM. Let\u0026rsquo;s get into it.\nStep 0: Prerequisties # You will need to have Terraform setup A working AWS account go installed locally Step 1: Prep Your Go Code #First things first, let\u0026rsquo;s get your Go function ready. Create a new file named main.go in your project directory.\nmain.go:\npackage main import ( \u0026#34;github.com/aws/aws-lambda-go/lambda\u0026#34; \u0026#34;log\u0026#34; ) func handler() error { log.Println(\u0026#34;Hello from Lambda!\u0026#34;) return nil } func main() { lambda.Start(handler) } This function does nothing more than log a message, but it’s a good start. Next steps:\n# mac skill issue inbound GOOS=linux # compile go build -o bootstrap main.go zip function.zip bootstrap Step 2: Set the Stage with Terraform #Personally I like to create a directory in my project called .terraform/ but feel free to use your base directory in the project. You’ll want a few files to manage this setup properly: main.tf, variables.tf, lambda.tf, eventbridge.tf.\nmain.tf Setup of generic terraform information for the project.\nterraform { required_version = \u0026#34;\u0026gt;= 0.14\u0026#34; required_providers { aws = { source = \u0026#34;hashicorp/aws\u0026#34; version = \u0026#34;\u0026gt;= 3.0\u0026#34; } } } provider \u0026#34;aws\u0026#34; { region = var.region } data \u0026#34;aws_caller_identity\u0026#34; \u0026#34;current\u0026#34; {} data \u0026#34;aws_region\u0026#34; \u0026#34;current\u0026#34; {} variables.tf Declare your essentials here.\nvariable \u0026#34;region\u0026#34; { description = \u0026#34;AWS region to deploy resources\u0026#34; type = string default = \u0026#34;eu-west-2\u0026#34; } variable \u0026#34;function_name\u0026#34; { description = \u0026#34;Name of our lambda function\u0026#34; type = string default = \u0026#34;getting-started-with-lambda\u0026#34; } variable \u0026#34;lambda_role_name\u0026#34; { description = \u0026#34;IAM role name for our Lambda function\u0026#34; type = string default = \u0026#34;go-lambda-role\u0026#34; } variable \u0026#34;event_rule_name\u0026#34; { description = \u0026#34;Name for the EventBridge rule\u0026#34; type = string default = \u0026#34;go-lambda-every-minute\u0026#34; } variable \u0026#34;event_description\u0026#34; { description = \u0026#34;Description of what the EventBridge rule does\u0026#34; type = string default = \u0026#34;Fires every minute\u0026#34; } variable \u0026#34;event_schedule_expression\u0026#34; { description = \u0026#34;Schedule expression for the EventBridge rule\u0026#34; type = string default = \u0026#34;rate(1 minute)\u0026#34; } iam.tf Define your IAM role that the Lambda will use.\nlocals { account_id = data.aws_caller_identity.current.account_id } resource \u0026#34;aws_iam_role\u0026#34; \u0026#34;go_lambda_role\u0026#34; { name = var.lambda_role_name assume_role_policy = jsonencode({ \u0026#34;Version\u0026#34; : \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34; : [ { \u0026#34;Action\u0026#34; : \u0026#34;sts:AssumeRole\u0026#34;, \u0026#34;Principal\u0026#34; : { \u0026#34;Service\u0026#34; : \u0026#34;lambda.amazonaws.com\u0026#34; }, \u0026#34;Effect\u0026#34; : \u0026#34;Allow\u0026#34; } ] }) inline_policy { name = \u0026#34;go-lambda-policies\u0026#34; policy = jsonencode({ \u0026#34;Version\u0026#34; : \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34; : [ { \u0026#34;Effect\u0026#34; : \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34; : \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;Resource\u0026#34; : \u0026#34;arn:aws:logs:${data.aws_region.current.name}:${local.account_id}:*\u0026#34; }, { \u0026#34;Effect\u0026#34; : \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34; : [ \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34; : [ \u0026#34;arn:aws:logs:${data.aws_region.current.name}:${local.account_id}:log-group:/aws/lambda/*:*\u0026#34; ] } ] }) } } lambda.tf Here’s where the magic happens. Define your Lambda function resource.\nresource \u0026#34;aws_lambda_function\u0026#34; \u0026#34;go_lambda_function\u0026#34; { function_name = var.function_name role = aws_iam_role.go_lambda_role.arn package_type = \u0026#34;Zip\u0026#34; handler = \u0026#34;bootstrap\u0026#34; runtime = \u0026#34;provided.al2023\u0026#34; # This will need changing if you don\u0026#39;t create a subdirectory for terraform filename = \u0026#34;../function.zip\u0026#34; source_code_hash = filebase64sha256(\u0026#34;../function.zip\u0026#34;) depends_on = [ aws_iam_role.go_lambda_role ] tags = { Name = \u0026#34;Go Lambda Example\u0026#34; } } resource \u0026#34;aws_lambda_permission\u0026#34; \u0026#34;allow_cloudwatch_to_call_split_lambda\u0026#34; { statement_id = \u0026#34;AllowExecutionFromCloudWatch\u0026#34; action = \u0026#34;lambda:InvokeFunction\u0026#34; function_name = aws_lambda_function.go_lambda_function.function_name principal = \u0026#34;events.amazonaws.com\u0026#34; source_arn = aws_cloudwatch_event_rule.go_lambda_every_minute.arn } eventbridge.tf Set up the event bridge to run your lambda function on a one minute schedule.\nresource \u0026#34;aws_cloudwatch_event_rule\u0026#34; \u0026#34;go_lambda_every_minute\u0026#34; { name = var.event_rule_name description = var.event_description schedule_expression = var.event_schedule_expression } resource \u0026#34;aws_cloudwatch_event_target\u0026#34; \u0026#34;trigger_lambda_on_schedule\u0026#34; { rule = aws_cloudwatch_event_rule.go_lambda_every_minute.name target_id = \u0026#34;lambda\u0026#34; arn = aws_lambda_function.go_lambda_function.arn } Step 3: Deploy #Firstly you will need to initalize your terraform in the repository.\nterraform init and you will then need to plan and apply\nterraform plan # review the above after running terraform apply # select yes when happy to apply \u0026amp; deploy Step 4: Check the logs! #You should now be able to view the lambda function being triggered under the cloud watch log group we created.\nStep 5: Destroy #Although this is all using the free tier, make sure to tear always destroy your aws resources when they\u0026rsquo;re not in use.\nterraform destory #select yes Hope you enjoyed.\n","date":"27 April 2024","permalink":"https://matthewrobinsondev.com/posts/create-a-go-lambda-function-with-terraform/","section":"Blog","summary":"","title":"How to Speedrun Setting Up a Go Lambda Function with Terraform"},{"content":"AI isn\u0026rsquo;t taking our jobs anytime soon, Devin certainly isn\u0026rsquo;t. I\u0026rsquo;d love to see Devin attend all of those agile ceremonies and use Jira!\nIf AI isn\u0026rsquo;t taking our current jobs, how will it affect our future job prospects? My primary concern with AI isn\u0026rsquo;t the technology itself, but rather how it\u0026rsquo;s being utilized. I\u0026rsquo;m not going to get into the security of these tools, which is defintely questionable, or even how they are being used to cause an upsurge in bug bounties. I\u0026rsquo;m also not going to directly talk about copilot (but it is included when speaking generally about AI tools as a whole), as I wrote too much originally on it and decided that topic is worth it\u0026rsquo;s own post.\nThis is going to be about how it directly effects a developer. More specifically a developer who is a solution copier.\nWho Are Solution Copiers? #Firstly, it\u0026rsquo;s not someone who just uses so happens to use copy and paste. Sometimes that\u0026rsquo;s required in our line of work. It is however, someone who only copies solutions.\nMore specifically, a solution copier:\nBlindly copies and pastes a variety of snippets found in their existing codebase, Stack Overflow, or now from LLMs. Does not understand the code they use; they may recognize words or symbols but can\u0026rsquo;t explain the code\u0026rsquo;s function under technical questioning. Lacks and does not apply problem-solving skills. I\u0026rsquo;m not claiming I\u0026rsquo;ve never been in this situation. In fact, I\u0026rsquo;d argue that most, if not all, developers probably start this way, especially those transitioning directly from an educational setting to the workplace.\nFor example, projects at university have deadlines, like most students I would put them off and then try to complete them in a silly time frame we\u0026rsquo;d created for ourselves. Who misses university ey.\nHow do you do meet those deadlines? Well, you know what the problem is, so you search for ways to implement the solution. Eventually, you find some code that works, you incorporate it into your project, and move on to the next issue. You might not understand every detail of your code, but your project works.\nOver time, you\u0026rsquo;re likely to face challenges that can\u0026rsquo;t be solved with a quick online search. Whether it\u0026rsquo;s a colleague or lecturer questioning your methods, or simply a problem that has no easy answers online, these challenges push you to research and understand the solutions you implement, or even better if you then create a better solution based on this experience.\nYou start building habits of browsing documentation, reading how things work, going that extra step to figure the problem out \u0026amp; overcome it. You stop being a Solution Copier.\nYou progress, learn and develop.\nHow AI Can Hinder Your Progress #These AI tools take this away, they have an answer for everything with 100% confidence. You don\u0026rsquo;t have to overcome these hurdles, you aren\u0026rsquo;t forced to think about the problem and what is the best solution? You are just given an answer.\nIt\u0026rsquo;s akin to searching on Stack Overflow and hoping for a relevant solution. Even there, you\u0026rsquo;re likely to find multiple answers, each with its own reasoning and context, requiring you to adapt and understand how a given solution fits your specific problem.\nThis interaction, even if minor, helps to foster learning habits.\nHowever, AI Tools are like stack overflow on steroids. They make those interactions none existent, they allow you to skip any siutation which requires logical thinking.\nNot only are you not developing \u0026amp; honing these skills, but you start to lose those critical thinking skills. When you start typing and it it just automatically suggests an entire function, you skim over it and bingo, problem solved \u0026amp; nothing learned.\nThat is my main point gripe, I\u0026rsquo;ve seen countless people get lost in accepting the confidence of these AI tools. Their answers, whilst derived from somewhere, can be as incorrect as anything else you\u0026rsquo;d find on a forum. Just be mindful on how you use these tools \u0026amp; not lose what makes you a developer.\nThat Doesn\u0026rsquo;t Mean You Should Ignore Good Tools #I like to end on positive notes, so it\u0026rsquo;s worth noting that AI tools can be incredibly useful. They don\u0026rsquo;t need to be ignored, just used with caution.\nFor example, I\u0026rsquo;ve used ChatGPT and OpenAI\u0026rsquo;s API to draft a more detailed skeleton for my notes, which I have highlighted in a previous post. When I have time later, I would then vet these notes and remove any incorrect points \u0026amp; add additional notes upon research.\nMost of these tools have a lot of benefits, anyone who have used them will have at least once been impressed by an answer you wouldn\u0026rsquo;t have expected. Their great tools afterall, but their just that. They should help you fill knowledge gaps in, do mundane tasks, offer starting points, etc. They shouldn\u0026rsquo;t be taking in an entire file, ask to rewrite and add a feature, pasting it into your editor and shipping it. You still need to understand what is going on.\nIt\u0026rsquo;s also a good rubber duck!\n","date":"7 April 2024","permalink":"https://matthewrobinsondev.com/posts/ai-isnt-taking-your-job-yet/","section":"Blog","summary":"","title":"AI isn't going to take your job just yet but could cost you future ones"},{"content":"The lack of vertical spacing to be exact.\nLike everything related to readability, you might argue it\u0026rsquo;s a skill issue. Which I can accept, whilst shedding a tear, but that\u0026rsquo;s a topic for another day though.\nThe cognitive load theory suggests that our working memory has a limited capacity for processing new information. When code is densely packed without clear visual breaks, it increases the cognitive load on developers trying to understand the code.\nLogically grouping code by relating variables or patterns help build this mind map of how the code is working subconciously. By doing this and separating unrelated sections, developers can better understand the relationships and dependencies within the code.\nWithout realizing it, we start to process the code and its functions by visualizing it in one way or another. Not having clear breakpoints for closely related items slows this process. Vertical spacing reduces the cognitive effort required to parse and understand the code. It highlights the structure, making it less overwhelming for both new and experienced developers.\nIt\u0026rsquo;s like a reading a book, you need paragraphs to group sentences and clearly break from the next set of ideas.\nThis example is only 18 lines long, so not a great example, but I feel it helps explain what I\u0026rsquo;m trying to get across.\n// No Spacing func init() { configDir, err := os.UserConfigDir() viper.SetConfigName(\u0026#34;config\u0026#34;) viper.SetConfigType(\u0026#34;toml\u0026#34;) viper.AddConfigPath(fmt.Sprintf(\u0026#34;%s/quicknote-ai\u0026#34;, configDir)) err = viper.ReadInConfig() if err != nil { fmt.Println(\u0026#34;Errored reading config:\u0026#34;, err) return } if !viper.IsSet(\u0026#34;openai_api_key\u0026#34;) { fmt.Println(\u0026#34;Please add your openai_api_key to the config\u0026#34;) return } client := \u0026amp;http.Client{} aiService = ai.NewOpenAIService(viper.GetString(\u0026#34;openai_api_key\u0026#34;), client) noteCmd.Flags().StringVarP(\u0026amp;thought, \u0026#34;thought\u0026#34;, \u0026#34;t\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;No thoughts wise guy?\u0026#34;) noteCmd.MarkFlagRequired(\u0026#34;thought\u0026#34;) noteCmd.Flags().StringVarP(\u0026amp;model, \u0026#34;model\u0026#34;, \u0026#34;m\u0026#34;, \u0026#34;gpt-3.5-turbo\u0026#34;, \u0026#34;Fancy a specific model?\u0026#34;) rootCmd.AddCommand(noteCmd) } // Spacing func init() { configDir, err := os.UserConfigDir() if err != nil { fmt.Println(\u0026#34;Error getting config directory:\u0026#34;, err) return } viper.SetConfigName(\u0026#34;config\u0026#34;) viper.SetConfigType(\u0026#34;toml\u0026#34;) viper.AddConfigPath(fmt.Sprintf(\u0026#34;%s/quicknote-ai\u0026#34;, configDir)) err = viper.ReadInConfig() if err != nil { fmt.Println(\u0026#34;Errored reading config:\u0026#34;, err) return } if !viper.IsSet(\u0026#34;openai_api_key\u0026#34;) { fmt.Println(\u0026#34;Please add your openai_api_key to the config\u0026#34;) return } client := \u0026amp;http.Client{} aiService = ai.NewOpenAIService(viper.GetString(\u0026#34;openai_api_key\u0026#34;), client) noteCmd.Flags().StringVarP(\u0026amp;thought, \u0026#34;thought\u0026#34;, \u0026#34;t\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;No thoughts wise guy?\u0026#34;) noteCmd.MarkFlagRequired(\u0026#34;thought\u0026#34;) noteCmd.Flags().StringVarP(\u0026amp;model, \u0026#34;model\u0026#34;, \u0026#34;m\u0026#34;, \u0026#34;gpt-3.5-turbo\u0026#34;, \u0026#34;Fancy a specific model?\u0026#34;) rootCmd.AddCommand(noteCmd) } There\u0026rsquo;s a practical article with multiple examples in python of this in an article I\u0026rsquo;ve often referred people too in the past here, it\u0026rsquo;s a good read.\n","date":"24 March 2024","permalink":"https://matthewrobinsondev.com/posts/vertical-spacing-the-unwritten-rule/","section":"Blog","summary":"","title":"Vertical Spacing \u0026 Reducing Cognitive Load"},{"content":"What is mutation testing? #Well it\u0026rsquo;s not this. If mutation testing is the answer, what is the question? #Well, the assurance of high-quality software relies not just on writing tests but on ensuring those tests are genuinely effective. So how do we measure this? \u0026amp; that is the question.\nMutation testing is a technique designed to evaluate and improve the effectiveness of your test suite. By deliberately introducing small changes, or mutations, into the source code, mutation testing challenges your tests to catch these modifications, thereby enhancing the robustness of your testing tools.\nIt wants to create test failures, causing test failures means that you\u0026rsquo;re tests are actually asserting what you expect. If the tests still pass despite your code changing, it\u0026rsquo;s probably worth revisiting those tests. This is where just using code coverage as a metric lies to you.\nWhy Mutation Testing Matters #Mutation testing transcends traditional testing by verifying that your tests do more than just pass, shakes fist angrily at code coverage, they must catch actual flaws.\nMy meme skills need work. It ensures that tests are not superficially passing but are capable of detecting unintended behaviours, gaps in test coverage, and inadequacies in test assertions.\nBenefits # Detects Unintended Behaviour: Uncovers scenarios not covered by existing tests. Identifies Untested Code: Highlights parts of the application lacking sufficient tests. Improves Test Quality: Exposes poorly written or ineffective tests. Encourages Regular Test Maintenance: Signals when tests need updates due to code changes. Detractors #The main detractor of mutation testing is time, if you think about how long your test suite takes to run now, then multiply that by however many mutants are spawned. Yeah it\u0026rsquo;s a while, however there are work arounds such as only running git diff\u0026rsquo;d files or lines to help resolve this.\nIf you are running containerized integration tests, you will need to resolve the potential issue of state management between your database connections.\nFull list of mutators can be found here: Mutators in infection\nIntegrating Mutation Testing in PHP #Infection # Infection is a PHP mutation testing library based on AST (Abstract Syntax Tree) mutations. It works as a CLI tool and can be executed from your project’s root.\nhttps://infection.github.io/guide/index.html\nTypes of Mutants in Mutation Testing #A few examples from the demo repository output found at the bottom of this post:\nWarning: Escaped Mutant for Mutator \u0026#34;NullSafeMethodCall\u0026#34;: --- Original +++ New @@ @@ public function checkInventory(string $itemId) : int { $item = $this-\u0026gt;repository-\u0026gt;getItem($itemId); - $quantity = $item?-\u0026gt;getQuantity(); + $quantity = $item-\u0026gt;getQuantity(); if ($quantity === null) { // throw something } Warning: Escaped Mutant for Mutator \u0026#34;Identical\u0026#34;: --- Original +++ New @@ @@ { $item = $this-\u0026gt;repository-\u0026gt;getItem($itemId); $quantity = $item?-\u0026gt;getQuantity(); - if ($quantity === null) { + if ($quantity !== null) { // throw something } if ($quantity == 0) { Warning: Escaped Mutant for Mutator \u0026#34;GreaterThan\u0026#34;: --- Original +++ New @@ @@ if (empty($price)) { $price = $this-\u0026gt;getPrice($currency); } - if ($discountPercentage \u0026gt; self::ZERO_PERCENT \u0026amp;\u0026amp; $discountPercentage \u0026lt;= self::WHOLE_PERCENT) { + if ($discountPercentage \u0026gt;= self::ZERO_PERCENT \u0026amp;\u0026amp; $discountPercentage \u0026lt;= self::WHOLE_PERCENT) { $price *= 1 - $discountPercentage / 100; $this-\u0026gt;setPrice($price, $currency); } Warning: Escaped Mutant for Mutator \u0026#34;LogicalAnd\u0026#34;: --- Original +++ New @@ @@ if (empty($price)) { $price = $this-\u0026gt;getPrice($currency); } - if ($discountPercentage \u0026gt; self::ZERO_PERCENT \u0026amp;\u0026amp; $discountPercentage \u0026lt;= self::WHOLE_PERCENT) { + if ($discountPercentage \u0026gt; self::ZERO_PERCENT || $discountPercentage \u0026lt;= self::WHOLE_PERCENT) { $price *= 1 - $discountPercentage / 100; $this-\u0026gt;setPrice($price, $currency); } } Warning: Escaped Mutant for Mutator \u0026#34;IncrementInteger\u0026#34;: --- Original +++ New @@ @@ } public function setPrice(float $price, string $currency) : void { - $this-\u0026gt;prices[$currency] = round($price, 2); + $this-\u0026gt;prices[$currency] = round($price, 3); } } Installation via Composer #To integrate mutation testing into your PHP projects, you can use Infection, a mutation testing framework designed for PHP. Installing Infection is straightforward with Composer:\ncomposer require --dev infection/infection\nThis command adds Infection to your project as a development dependency, enabling you to run mutation tests alongside your regular testing suite.\nRunning Mutation Tests #Once installed, you can execute mutation tests to evaluate the quality of your test suite. Here\u0026rsquo;s a basic command to start mutation testing with Infection:\nvendor/bin/infection --min-msi=70 --min-covered-msi=75\nThis command runs mutation tests on your project, with the min-msi (minimum Mutation Score Indicator) and min-covered-msi (minimum Covered Code MSI) options set to ensure a certain threshold of test effectiveness.\nUsage #Small Example Repo #https://github.com/matthewrobinsondev/mutation-testing-example-repo\nThere are 3 branches named STEP-1, STEP-2 and STEP-3. The idea of these are to understand how the code coverage and MSI are different. Move on to the next step once you have worked on those tests to get them to 100% MSI.\nPipeline #https://infection.github.io/guide/using-with-ci.html\nConclusions #Mutation testing represents yet another powerful tool in the arsenal of PHP developers, aimed at enhancing the quality and effectiveness of test suites. By introducing these deliberate mutations into our source code, it challenges and strengthens our testing strategies, ensuring that our tests are not just passing but are genuinely robust.\nResources # https://www.techtarget.com/searchitoperations/definition/mutation-testing#:~:text=Mutation%20testing%2C%20also%20known%20as,cause%20errors%20in%20the%20program. https://medium.com/@maks_rafalko/infection-mutation-testing-framework-c9ccf02eefd1 https://infection.github.io/guide/ ","date":"23 March 2024","permalink":"https://matthewrobinsondev.com/posts/introduction-to-mutation-testing-in-php/","section":"Blog","summary":"","title":"An introduction into Mutation Testing in PHP"},{"content":"I\u0026rsquo;ve spent the last couple of days dabbling in Go. To provide some context, I quite like the concept of building a \u0026lsquo;second brain\u0026rsquo; through documentation and notes \u0026amp; have been doing so for over a year. So, I decided to build a small CLI tool that generates a note in a predefined structure using the OpenAI API, based on the \u0026rsquo;thought\u0026rsquo; that comes into my head.\nThis idea stems from:\nThe desire to not have to leave my normal workflow in the terminal. The elimination of context switching. It\u0026rsquo;s not perfect, but it serves as a solid starting block. Plus, it\u0026rsquo;s been fun to mess around in a language I don\u0026rsquo;t use too often! ","date":"17 March 2024","permalink":"https://matthewrobinsondev.com/posts/dabbling-in-go-cli/","section":"Blog","summary":"","title":"Quick trip into being a Gopher!"},{"content":"Use Stow for Your Dotfiles. Please. #Ever since I took an interest in dotfiles (I\u0026rsquo;m looking at you emacs \u0026amp; awesome wm) and their magical ability to configure applications and tweak each little setting to my liking, I\u0026rsquo;ve been hooked. I spend more time configuring these tools than using them, in the true developer way.\nHowever, I always ran into one issue: I have multiple drives for different distros (and a consistent ability to break my machine) and have never found a great way to manage my config files.\nIt\u0026rsquo;s funny because its true. I always had slightly different configs based on the machine I was on, due to the nature of tweaking as I go. Well, not anymore! Stow is incredible. I\u0026rsquo;ve been using it for a while now, and it\u0026rsquo;s made my life much easier.\nWell, What is Stow? #Stow is a powerful symlink farm manager that simplifies the task of managing and deploying software packages, especially useful for handling dotfiles across multiple machines.\nAs described by themselves:\nIt takes distinct packages of software and/or data located in separate directories on the filesystem and makes them appear to be installed in the same place.\nEssentially, you can control any file in your home directory, including dotfiles, from within one directory. Think of all the clutter you remove! You can just focus on the files you want to maintain and move around.\nFor example My dotfiles repo is just my zshrc, alacritty, tmux \u0026amp; neovim configs, as an editors note here feel free to send me neovim configs / plugin recommendations as I\u0026rsquo;m updating mine currently.\nI use these on 3 different machines though, I don\u0026rsquo;t care about moving anything else over other than those configs. This allows me to remove the overhead of everything else in your .config which comes with your system of choice.\nCouple this with using Git to store all of your config files, and you can easily manage them all in one repository/directory. It\u0026rsquo;s bliss.\nSo, let\u0026rsquo;s get into setting it up!\nGuide #Step 1: Git and Stow #First things first: make sure you\u0026rsquo;ve got Git and Stow installed. Installing Stow is as easy as whispering sweet nothings into your terminal:\nsudo apt-get install stow # For Debian/Ubuntu brew install stow # For the macOS crowd, I believe And Git, well, if you haven\u0026rsquo;t got Git, I\u0026rsquo;m surprised you found this article.\nStep 2: Quick Setup #Kick things off by creating a dedicated Git repository for your dotfiles.\nmkdir ~/dotfiles cd ~/dotfiles git init Think of this new folder as your home directory, so you want to replicate its structure within the folder.\nIf you have your Alacritty config at\n~/.config/alacritty/alacritty.toml\nthen it should be the same, i.e.\n~/dotfiles/.config/alacritty/alacritty.toml.\nStep 3: Stow Away Your Treasures #While there are other methods, I found the easiest way was to move the configs I needed using something like mv to my dotfiles repository and then using stow .. This command sym-links your files back to their original locations in your dotfiles repository.\nStep 4: Commit to Git! #Now they\u0026rsquo;re all being managed in a non-hidden directory. Cool, but you don\u0026rsquo;t get the full benefit of this until you add Git into the mix. Pushing them to a remote repository means that no matter where you are, or how many times you\u0026rsquo;ve reinvented your machine, your personalised setup is just a few commands away.\ngit add . git commit -m \u0026#34;Behold, my dotfiles!\u0026#34; git remote add origin \u0026lt;remote-repository-url\u0026gt; git push -u origin master Now, if you make a change in ~/.config/alacritty/alacritty.toml, then when you go back to your dotfiles repo, you will see (with a good ole git status) that you can commit and manage those files with version control. This also lets you pull in any config changes from other machines at any time or revert your changes after breaking them!\nConclusion #I love Stow, and in tandem with Git, this is my preffered toolkit for managing dotfiles across multiple machines and systems. It provides a straightforward, reliable method to ensure your environment is always just the way you like it, no matter where you find yourself.\nIt\u0026rsquo;s easy, and it works. What more can you ask for?\nThanks for reading, hope you enjoyed!\nWant to know more? # Incredible video \u0026amp; aeshtetically pleasing video by Dreams of Autonomoy Stows Website previously linked Article I found searching for memes on dotfiles ","date":"3 March 2024","permalink":"https://matthewrobinsondev.com/posts/using-stow/","section":"Blog","summary":"","title":"Stow - Manage your dotfiles with ease"},{"content":"I\u0026rsquo;ve now been a professional developer for longer than I was at University. #Now that depressing statement is out of the way, I actually have some reflections \u0026amp; insights on those years I\u0026rsquo;d like to jot down.\nAlthough, before I go on, there\u0026rsquo;s an Albert Einstein quote I\u0026rsquo;ve recently read \u0026amp; it rings very true.\n\u0026ldquo;The more I learn, the more I realise how much I don\u0026rsquo;t know.\u0026rdquo;\nIn the last 5 years, I\u0026rsquo;ve worked for two companies who couldn\u0026rsquo;t be further from each other in retrospect. I won\u0026rsquo;t go too much into it but my first job had 7 developers when I joined \u0026amp; the second had 70+. That being said it was one of the main reasons for me switching companies. I wanted to see the difference in organisation\u0026rsquo;s, the way the software teams work, the technology. Truth be told I\u0026rsquo;ve had great experiences from both \u0026amp; as you can tell, learnt quite a lot! often the hard way.\nTake a step back when explaining your work #Anytime I think of advice given to me in my career this is the by far the first thing that comes to my mind. Very early into my career I was given one piece of advice.\n\u0026ldquo;Everyone can write code, what will get you far is being able to explain the technical to the non-technical.\u0026rdquo;\nShout out James Ball\nAt the time, I was definitely confused by this. Everyone can code???\nThough as time passed it started to make more sense. People could complete tickets but when it came to explaining that work to shareholders, or product owner\u0026rsquo;s with questions, they wouldn\u0026rsquo;t be able to translate from the depths of the code to the reality of day to day use of said software.\nThey more than likely don\u0026rsquo;t know or even more likely don\u0026rsquo;t care how you\u0026rsquo;ve produced the goods, they just want a working product. You need to be able to explain to them, how things work, why development is going well, why it\u0026rsquo;s going bad \u0026amp; often estimating how long something will take.\nYou\u0026rsquo;re a programmer not a copywriter #Programming is fundamentally about solving problems.\nI think in the ever growing world of AI this is just as important as ever, although in the growing world of AI this post may not be relevant in 5 years. Critical thinking \u0026amp; problem solving are the most important skills in being a software developer in my opinion, if you quantify them they\u0026rsquo;d be required on every CV.\nCopying code from ChatGPT, Stack Overflow, anywhere else without understanding what it does is just a recipe for disaster. You\u0026rsquo;re just trying to shove anything in to stop the leak, instead of thinking about the best way to solve the leak.\nI\u0026rsquo;ll draw on experience to help paint the picture, a month or two into my first job I was working on a type of integration into the platform that had been done over 10 times before. So it was a very simple structure to follow, I followed an example, wrote my tests, plugged in the new API connection, worked on transforming the data back into our data structure. All going swimmingly, right?\nWell I ran into an issue.\nI spent 2 days trying to get my tests to work or CLI run of the local integration to work but to no luck. I looked over every example I could find trying to see where I differed. I eventually spoke to my colleague who asked me \u0026ldquo;Have you followed the error?\u0026rdquo;, I replied \u0026ldquo;of course I have\u0026rdquo;, explained how it takes me to this line but all the other integrations use that so it can\u0026rsquo;t be that. It was that.\nHe then clicked through to the abstract that everything was using \u0026amp; proceeded to start debugging. I sat there looking at this abstract logic like it was magic. He started to explain to me where it was going wrong \u0026amp; where to look. That\u0026rsquo;s when I found out, it wasn\u0026rsquo;t possible in the current system.\nTrying to understand the magic is where you truly start to figure out what\u0026rsquo;s going on, nothing magically works in software. In my case the system wasn\u0026rsquo;t built to handle whatever I was trying to do. I had to solve the problem that was in front of me, this new integration required a solution to the problem that I had to develop. I\u0026rsquo;d willingly bet my first solution was probably not what we went with, but it\u0026rsquo;s much easier to understand the solution when your being steered in the right direction rather than dealing with more magic.\nPull Request comments aren\u0026rsquo;t a negative thing. #How terrifying, not only have you done something wrong but everyone can publicly see that you\u0026rsquo;ve done something wrong. You might as well hand in your notice!\nCommments aren\u0026rsquo;t a negative, its feedback. #Firstly, a comment isn\u0026rsquo;t always to condemn. In recent months more than ever I leave comments on pull requests at work to understand the logic being applied. I want to understand why specific logic is being applied in places, It\u0026rsquo;s a conversation. You have comment sections \u0026amp; discussions on most social media platforms, I\u0026rsquo;m not saying post your life story on github but they can be conversations.\nOn the flip side, be mindful of the tone of comments. In the age of teams \u0026amp; remote working, gauging the tone of a comment is hard. For example, saying \u0026ldquo;Good approach however, have you considered X?\u0026rdquo; instead of \u0026ldquo;Why didn\u0026rsquo;t you do X?\u0026rdquo;, or \u0026ldquo;Do X.\u0026rdquo; without any resource or explanation on why that should be implemented, these can make a big difference I\u0026rsquo;ve found.\nFeedback Fatigue. # Would you rather spend one extra day working on resolutions of bugs/edge cases someone may have spotted or move your ticket to done \u0026amp; then spend the next sprint on bug tickets for said issue? The number of comments don\u0026rsquo;t matter at the end of the day, once it\u0026rsquo;s merged, who even remembers? Don\u0026rsquo;t worry about it.\nHowever I will say one thing on this as Feedback Fatigue is a real thing unfortunately, not everything needs to be under such a microscope to the point of blocking a PR. I actually stumbelled upon a Reaction to an article about a guy who\u0026rsquo;s team resented him for blocking prs for \u0026ldquo;nits\u0026rdquo;.\nTurning it back positive to sign off #I\u0026rsquo;ve just laid out some learnings I\u0026rsquo;ve discovered over the last half a decade, so based on that einstein quote from the start I imagine in another 5 years It\u0026rsquo;ll be twice as long as this!\nI\u0026rsquo;m not perfect, I\u0026rsquo;m far from it, I\u0026rsquo;m just a regular guy who decided to ramble on the internet after all.\nHope you enjoyed!\n","date":"22 February 2024","permalink":"https://matthewrobinsondev.com/posts/half-a-decade-as-a-dev/","section":"Blog","summary":"","title":"Half a decade as a software developer in 5 minutes"},{"content":"Hi 👋 , I\u0026rsquo;m Matt, if you hadn\u0026rsquo;t of guessed.\nI\u0026rsquo;m a 27 year old software developer from the North West of England. As the tag on the front page says, I like software, systems, sports \u0026amp; simpsons. I\u0026rsquo;m still yet to find a scenario I can\u0026rsquo;t respond with a simpsons gif too.\nI\u0026rsquo;ve loved sport since I was kid, most side projects I\u0026rsquo;ve started in the last couple of years have been sport related. Mainly as of late my attempt at creating an FPL type MMA game, and creating an app which sends me an SMS over twilio with trending players being transferred in \u0026amp; out in standard FPL. I will write more on them individually in the future, I promise.\nIn the software development world, I\u0026rsquo;m a huge advocate for Test Driven Development. I\u0026rsquo;m also a big fan of improving the teams development process as much as possible, mainly by writing automated scripts or creating some tooling, we are developers after all. I\u0026rsquo;ve wrote PHP professionally for the last 5 years and compared to the majority of things you\u0026rsquo;d likely to read on the internet, I actually enjoy it.\n","date":null,"permalink":"https://matthewrobinsondev.com/about/","section":"Home","summary":"","title":"About Me"},{"content":"","date":null,"permalink":"https://matthewrobinsondev.com/categories/","section":"Categories","summary":"","title":"Categories"}]